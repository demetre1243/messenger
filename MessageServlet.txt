import javax.servlet.*;
import javax.servlet.http.*;
import java.io.*;
import java.sql.*;
import com.fasterxml.jackson.databind.ObjectMapper;

public class MessageServlet extends HttpServlet {
    private static final String DB_URL = "jdbc:postgresql://localhost:5432/messenger";
    private static final String DB_USER = "postgres";
    private static final String DB_PASSWORD = "your_password";

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String username = request.getParameter("username");
        String password = request.getParameter("password");

        if (username == null || password == null || username.isEmpty() || password.isEmpty()) {
            response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Username and password are required.");
            return;
        }

        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {
            String query = "SELECT message, created_at FROM messages WHERE user_id = (SELECT id FROM users WHERE username = ? AND password = ?)";
            try (PreparedStatement stmt = connection.prepareStatement(query)) {
                stmt.setString(1, username);
                stmt.setString(2, password);
                ResultSet rs = stmt.executeQuery();

                response.setContentType("application/json");
                ObjectMapper objectMapper = new ObjectMapper();
                StringBuilder messagesJson = new StringBuilder("[");
                while (rs.next()) {
                    String message = rs.getString("message");
                    String createdAt = rs.getString("created_at");
                    messagesJson.append("{\"message\": \"").append(message)
                            .append("\", \"createdAt\": \"").append(createdAt).append("\"},");
                }
                if (messagesJson.length() > 1) {
                    messagesJson.setLength(messagesJson.length() - 1);
                }
                messagesJson.append("]");

                response.getWriter().write(messagesJson.toString());
            }
        } catch (SQLException e) {
            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Database error: " + e.getMessage());
        }
    }

    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
        String username = request.getParameter("username");
        String message = request.getParameter("message");

        if (username == null || message == null || username.isEmpty() || message.isEmpty()) {
            response.sendError(HttpServletResponse.SC_BAD_REQUEST, "Username and message are required.");
            return;
        }

        if (message.contains("\n")) {
            response.sendError(HttpServletResponse.SC_FORBIDDEN, "Message cannot contain newlines.");
            return;
        }

        try (Connection connection = DriverManager.getConnection(DB_URL, DB_USER, DB_PASSWORD)) {
            String userQuery = "SELECT id FROM users WHERE username = ?";
            int userId = -1;
            try (PreparedStatement stmt = connection.prepareStatement(userQuery)) {
                stmt.setString(1, username);
                ResultSet rs = stmt.executeQuery();
                if (rs.next()) {
                    userId = rs.getInt("id");
                } else {
                    response.sendError(HttpServletResponse.SC_NOT_FOUND, "User not found.");
                    return;
                }
            }

            String insertMessageQuery = "INSERT INTO messages (user_id, message) VALUES (?, ?)";
            try (PreparedStatement stmt = connection.prepareStatement(insertMessageQuery)) {
                stmt.setInt(1, userId);
                stmt.setString(2, message);
                stmt.executeUpdate();
            }

            response.setStatus(HttpServletResponse.SC_OK);
            response.getWriter().write("Message sent successfully!");
        } catch (SQLException e) {
            response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, "Database error: " + e.getMessage());
        }
    }
}
